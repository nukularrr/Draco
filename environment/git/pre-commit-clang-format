#!/bin/bash

#--------------------------------------------------------------------------------------------------#
# git pre-commit hook that runs an clang-format stylecheck.
# Features:
#  - abort commit when commit does not comply with the style guidelines
#  - create a patch of the proposed style changes

# modifications for clang-format by rene.milk@wwu.de
# This file is part of a set of unofficial pre-commit hooks available at github.
# Link:    https://github.com/githubbrowser/Pre-commit-hooks
# Contact: David Martin, david.martin.mailbox@googlemail.com

#--------------------------------------------------------------------------------------------------#
# SETTINGS
# set path to clang-format binary. If clang-format is not available, then don't run this hook. Style
# issues will be caught during by the pull request process.

# Allow developers to opt-out
auto_apply=false
if [[ ${DRACO_AUTO_CLANG_FORMAT:-YES} ]]; then
  case $DRACO_AUTO_CLANG_FORMAT in
    NO | OFF | FALSE | no | off | false ) exit 0 ;;
    YES | ON | TRUE | yes | on | true) auto_apply=true ;;
    DIFF | diff) auto_apply=false ;;
  esac
fi

# remove any older patches from previous commits. Set to true or false.
DELETE_OLD_PATCHES=true

# file types to parse. Only effective when PARSE_EXTS is true.
FILE_EXTS=".c .h .cpp .hpp .cc .hh .cxx .cu"
# FILE_ENDINGS_INCLUDE="_f.h _f77.h _f90.h"
FILE_ENDINGS_EXCLUDE="_f.h _f77.h _f90.h"
export FILE_EXTS FILE_ENDINGS_EXCLUDE

#--------------------------------------------------------------------------------------------------#
# There should be no need to change anything below this line.

# shellcheck source=environment/git/canonicalize_filename.sh
source "$(dirname -- "$0")/canonicalize_filename.sh"

# shellcheck source=tools/common.sh
source "$(dirname -- "$0")/common.sh"

# exit on error
set -e
git_min_ver=2.0.0
git_ver=$(git --version | sed -e 's/[[:alpha:]|(|[:space:]|-]//g')
if version_gt "${git_min_ver}" "${git_ver}"; then
  echo "ERROR: Your version of git is too old. Expecting v2.0+. The pre-commit-hook disabled."
  exit 0
fi

CLANG_FORMAT=$(which clang-format)
if ! [[ -x "$CLANG_FORMAT" ]]; then
  exit 0
fi

cf_min_ver=6.0
cf_ver=$("$CLANG_FORMAT" --version | sed 's/[[:alpha:]|(|[:space:]|-]//g')
if version_gt "${cf_min_ver}" "${cf_ver}"; then
  echo "ERROR: Your version of clang-format is too old. Expecting v6.0+. The pre-commit-hook has"
  echo "       been disabled."
  exit 0
fi
if [ ! -x "$CLANG_FORMAT" ] ; then
    printf "Error: clang-format executable not found.\n"
    printf "Set the correct path in %s.\n" "$(canonicalize_filename "$0")"
    exit 1
fi

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1 ; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# create a random filename to store our generated patch
prefix="pre-commit-clang-format"
suffix="$(date +%s)"
patch="/tmp/$prefix-$suffix.patch"

# clean up any older clang-format patches
$DELETE_OLD_PATCHES && rm -f /tmp/$prefix*.patch

# create one patch containing all changes to the files
# shellcheck disable=SC2162
git diff-index --cached --diff-filter=ACMR --name-only $against -- | while read file;
do
    # ignore file if we do check for file extensions and the file does not match any of the
    # extensions specified in $FILE_EXTS
    if ! matches_extension "$file"; then continue; fi

    # clang-format our sourcefile, create a patch with diff and append it to our $patch
    # The sed call is necessary to transform the patch from
    #    --- $file timestamp
    #    +++ - timestamp
    # to both lines working on the same file and having a a/ and b/ prefix.
    # Else it can not be applied with 'git apply'.
    "$CLANG_FORMAT" -style=file "$file" | \
        diff -u "$file" - | \
        sed -e "1s|--- |--- a/|" -e "2s|+++ -|+++ b/$file|" >> "$patch"

done

# if no patch has been generated all is ok, clean up the file stub and exit
if [ ! -s "$patch" ] ; then
    printf "Files in this commit comply with the clang-format rules.\n"
    rm -f "$patch"
    exit 0
fi

# There are files that don't comply...
#
# If user wants to automatically apply these changes, then do it, otherwise, print the diffs and
# reject the commit.
if test $auto_apply = true; then
  git apply "$patch"
  printf "\nFiles in this commit were updated to comply with the clang-format rules. You must "
  printf "check and test\nthese changes and then stage these updates to be part of your current "
  printf "current change-set and retry\nthe commit.\n\n"
  git status
#  printf "The following changes were applied:\n\n"
#  cat "$patch"
  rm -f "$patch"
  exit 1
fi

# a patch has been created, notify the user and exit
printf "\nThe following differences were found between the code to commit and the clang-format "
printf "rules:\n\n"
cat "$patch"

printf "\nYou can apply these changes with:\n git apply %s\n" "${patch}"
printf "(This command may need to be called from the root directory of your repository)\n"
printf "Aborting commit. Apply changes and commit again or skip checking with --no-verify (not "
printf "recommended).\n\nYou can also manually update format by running clang-format -i <file>. "

exit 1

#--------------------------------------------------------------------------------------------------#
# End pre-commit-clang-format
#--------------------------------------------------------------------------------------------------#
