#!/bin/bash
#-*- Mode: bash -*-
#--------------------------------------------------------------------------------------------------#
# File  : config/capture_lcov.sh
# Date  : Thursday, Apr 09, 2020, 10:12 am
# Author: Kelly Thompson
# Note  : Copyright (C) 2020, Triad National Security, LLC., All rights are reserved.
#
# Helper script used by the make system's 'covrep' target.  This script allows us to capture the
# output from lcov to a file in the build directory since lcov only knows how to echo its report to
# stdout.
#--------------------------------------------------------------------------------------------------#

# Helper functions

function die ()
{
    echo " "; echo "FATAL ERROR: $1"; exit 1
}
function run ()
{
    echo "==> $1"; if [[ "${dry_run:-no}" == "no" ]]; then eval "$1"; fi
}
function print_use()
{
  echo " "
  echo "Usage: ${0##*/} -g /path/to/gcov -l /path/to/lcov -r repname -b directory"
  echo " "
  echo "All arguments are optional,  The first value listed is the default value."
  echo "  -h  help    prints this message and exits."
  echo "  -d  dir     Use directory as a base directory."
  echo "  -g  gcov    path to the gcov executable."
  echo "  -l  lcov    path to the lcov executable."
  echo "  -r  repname {coverage.txt}"
  echo "              filename for the text report."
}

# Process command line arguments
repname="coverage.txt"

while getopts ":b:g:l:r:" opt; do
case $opt in
b) basediropt="--base-directory ${OPTARG}" ;;
g) GCOV="${OPTARG}" ;;
l) LCOV="${OPTARG}" ;;
r) repname="${OPTARG}" ;;
\?) echo "" ;echo "invalid option: -$OPTARG"; print_use; exit 1 ;;
:)  echo "" ;echo "option -$OPTARG requires an argument."; print_use; exit 1 ;;
esac
done

# defaults if GCOV or LCOV are not set.
if ! [[ -x $GCOV ]]; then GCOV=$(which gcov) || die "gcov = ${GCOV} was not found"; fi
if ! [[ -x $LCOV ]]; then LCOV=$(which lcov) || die "lcov = ${LCOV} was not found"; fi

# Sanity Checks

if ! [[ -x $GCOV ]]; then die "gcov = ${GCOV} was not found"; fi
if ! [[ -x $LCOV ]]; then die "lcov = ${LCOV} was not found"; fi

# The coverage.info file should exist (generated by make target 'covrep')
if ! [[ -f coverage.info ]]; then
  die "Did not find coverage.info in the build tree."
fi

# Ask lcov to generate the text report:
# - generate the text report at the same location as coverage.info (top level of build tree).
echo "$LCOV --gcov-tool $GCOV --quiet ${basediropt} --list coverage.info --> ${repname}"

# We actually want word splitting in this case.
# shellcheck disable=SC2086
${LCOV} --gcov-tool "${GCOV}" --quiet ${basediropt} --list coverage.info &> "${repname}"
# also print the report to stdout.
cat "${repname}"

#--------------------------------------------------------------------------------------------------#
# end config/capture_lcov.sh
#--------------------------------------------------------------------------------------------------#
