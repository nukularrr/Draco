#--------------------------------------------*-cmake-*---------------------------------------------#
# file   config/draco-config-install.cmake.in
# author Kelly Thompson <kgt@lanl.gov>
# date   2012 Aug 1
# brief  Save Draco configuration information for installation (cmake export)
# note   Copyright (C) 2012-2023 Triad National Security, LLC., All rights reserved.
#--------------------------------------------------------------------------------------------------#
list( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}" )
get_filename_component( _SELF_DIR "${CMAKE_CURRENT_LIST_FILE}"  PATH )
include( "${_SELF_DIR}/draco-targets.cmake" )

# Setup for GNUtoMS (see 'cmake --help-property GNUtoMS')
@DRACO_GNUtoMS_INSTALL@

# Also set the draco install dir
set( DRACO_CONFIG_DIR "${_SELF_DIR}" )

# Inspect properties of Lib_dsxx to find a list of configurations
if( CMAKE_CONFIGURATION_TYPES ) # multi-config project files (not Makefiles)
  if( TARGET Lib_dsxx )
    get_target_property( DRACO_CONFIGURATION_TYPES Lib_dsxx IMPORTED_CONFIGURATIONS)
  endif()
  if( DRACO_CONFIGURATION_TYPES )
    set( CMAKE_CONFIGURATION_TYPES "${DRACO_CONFIGURATION_TYPES}" CACHE STRING
      "Available build configurations" FORCE )
  endif()
endif()

#--------------------------------------------------------------------------------------------------#
# Basic build information
#--------------------------------------------------------------------------------------------------#

set(DRACO_LIBRARY_TYPE "@DRACO_LIBRARY_TYPE@")
set(DRACO_TIMING "@DRACO_TIMING@")
set(DRACO_DIAGNOSTICS "@DRACO_DIAGNOSTICS@")
set(DRACO_STATIC_ANALYZER "@DRACO_STATIC_ANALYZER@")
set(Draco_VERSION "@Draco_VERSION@")
set(DRACO_ROUNDOFF_MODE "@DRACO_ROUNDOFF_MODE@")
set(DRACO_DBC_LEVEL "@DRACO_DBC_LEVEL@")

#--------------------------------------------------------------------------------------------------#
# MPI specific variables
#   These variables are provided to make it easier to get the mpi libraries and includes on systems
#   that do not use the mpi wrappers for compiling
#--------------------------------------------------------------------------------------------------#

set(DRACO_C4 "@DRACO_C4@" )
set(Draco_MPIEXEC_EXECUTABLE "@MPIEXEC_EXECUTABLE@")
set(Draco_MPIEXEC_MAX_NUMPROCS "@MPIEXEC_MAX_NUMPROCS@")
set(Draco_MPIEXEC_NUMPROC_FLAG "@MPIEXEC_NUMPROC_FLAG@")
set(Draco_MPI_C_WORKS "@MPI_C_WORKS@") # Used to help CAFS setup on Win32
set(Draco_MPI_LANG_LIST "@Draco_MPI_LANG_LIST@")

#--------------------------------------------------------------------------------------------------#
# OpenMP toggle
#   This allows us to explicitly disable OpenMP support (may be needed for mixed toolchains)
#--------------------------------------------------------------------------------------------------#
set(USE_OPENMP "@USE_OPENMP@")

# GPU build information
option(HAVE_GPU "Should we build GPU (HIP or CUDA) parts of the project?" @HAVE_GPU@)
set(USE_GPU "@USE_GPU@")
set(GPU_DBS_STRING "@GPU_DBS_STRING@")

if(${CMAKE_GENERATOR} MATCHES "Unix Makefiles" OR ${CMAKE_GENERATOR} MATCHES "Ninja")
  if("${GPU_DBS_STRING}" MATCHES "CUDA")

    # CUDA

    set(Draco_CMAKE_CUDA_FLAGS "@CMAKE_CUDA_FLAGS@")
    set(Draco_CMAKE_CUDA_FLAGS_DEBUG "@CMAKE_CUDA_FLAGS_DEBUG@")
    set(Draco_CMAKE_CUDA_FLAGS_RELWITHDEBINFO "@CMAKE_CUDA_FLAGS_RELWITHDEBINFO@")
    set(Draco_CMAKE_CUDA_FLAGS_RELEASE "@CMAKE_CUDA_FLAGS_RELEASE@")
    set(CUDA_ARCHITECTURES "@CUDA_ARCHITECTURES@")
    include(CheckLanguage)
    check_language(CUDA)
    if(CMAKE_CUDA_COMPILER)
      enable_language(CUDA)
    else()
      message( FATAL_ERROR "==> Cuda requested but nvcc not found. Try loading a cuda module.")
    endif()
  elseif("${GPU_DBS_STRING}" MATCHES "HIP")

    # HIP

    set(Draco_CMAKE_HIP_FLAGS "@CMAKE_HIP_FLAGS@")
    set(Draco_CMAKE_HIP_FLAGS_DEBUG "@CMAKE_HIP_FLAGS_DEBUG@")
    set(Draco_CMAKE_HIP_FLAGS_RELWITHDEBINFO "@CMAKE_HIP_FLAGS_RELWITHDEBINFO@")
    set(Draco_CMAKE_HIP_FLAGS_RELEASE "@CMAKE_HIP_FLAGS_RELEASE@")
    set(HIP_ARCHITECTURES "@HIP_ARCHITECTURES@")
    include(CheckLanguage)
    check_language(HIP)
    if(CMAKE_HIP_COMPILER)
      enable_language(HIP)
    else()
      message( FATAL_ERROR "==> Hip requested but rocmcc not found. Try loading a rocm module.")
    endif()
  endif()
endif()

# Is Fortran enabled (it is considered 'optional' for draco)?
if( ${CMAKE_GENERATOR} MATCHES "Unix Makefiles" OR ${CMAKE_GENERATOR} MATCHES "Ninja" )
  if( DEFINED ENV{FC} OR DEFINED CMAKE_Fortran_COMPILER )
    enable_language( Fortran OPTIONAL )
  endif()
endif()

get_property(_LANGUAGES_ GLOBAL PROPERTY ENABLED_LANGUAGES)

# Python
set( Python_Interpreter_FOUND "@Python_Interpreter_FOUND@" )
set( Python_EXECUTABLE "@Python_EXECUTABLE@" )

#--------------------------------------------------------------------------------------------------#
# Set useful general variables
#--------------------------------------------------------------------------------------------------#

# The TPLs enabled for this project
set(Draco_TPL_LIST "@Draco_TPL_LIST@")

#--------------------------------------------------------------------------------------------------#
# Save per target properties for importing into other projects.
#--------------------------------------------------------------------------------------------------#

@Draco_EXPORT_TARGET_PROPERTIES@

#--------------------------------------------------------------------------------------------------#
# Ensure imported targets required by Draco are defined
# - Optionally we could use 'include(CMakeFindDependencyMacro)'
#--------------------------------------------------------------------------------------------------#

include( vendor_libraries )

# If DRACO_CALIPER is 1, then this build of Draco requires the CALIPER::caliper target. If this
# target is not defined, then create it.
set(DRACO_CALIPER @DRACO_CALIPER@)
if(DRACO_CALIPER AND NOT TARGET CALIPER::caliper)
  setupCaliper()
endif()

set(NDI_FOUND @NDI_FOUND@)
if(NDI_FOUND AND NOT TARGET NDI::ndi)
  setupndi()
endif()


# If HAVE_LIBQUO is 1, then this build of Draco requires the LIBQUO::libquo target. If this
# target is not defined, then create it.
set(HAVE_LIBQUO @HAVE_LIBQUO@)
#if( HAVE_LIBQUO AND NOT TARGET LIBQUO::libquo)
#  setupLIBQUO()
#endif()

set(METIS_FOUND @METIS_FOUND@)
set(ParMETIS_FOUND @ParMETIS_FOUND@)

# ------------------------------------------------------------------------------------------------ #
# End draco-config.cmake
# ------------------------------------------------------------------------------------------------ #
