/*----------------------------------------------*-C-*---------------------------------------------*/
/*!
 * \file   config.h
 * \brief  CPP defines necessary for the ds++ package.
 * \note   Copyright (C) 2010-2021 Triad National Security, LLC., All rights reserved. */
/*------------------------------------------------------------------------------------------------*/

#ifndef rtt_dsxx_config_h
#define rtt_dsxx_config_h

/* hostname */
#include <limits.h>        // HOST_NAME_MAX, hostname

/*------------------------------------------------------------------------------------------------*/
/* Draco/CMake build system variables */
/*------------------------------------------------------------------------------------------------*/

/* DBC ENVIRONMENTS */
#define DBC @DRACO_DBC_LEVEL@

/* define DRACO_SHARED_LIBS */
#cmakedefine DRACO_SHARED_LIBS @DRACO_SHARED_LIBS@

/* Version Information */
#define Draco_BUILD_DATE "@Draco_BUILD_DATE@"
#define Draco_BUILD_TYPE @Draco_BUILD_TYPE@
#cmakedefine Draco_VERSION @Draco_VERSION@
#cmakedefine Draco_VERSION_FULL @Draco_VERSION_FULL@
#define Draco_VERSION_MAJOR "@Draco_VERSION_MAJOR@"
#define Draco_VERSION_MINOR "@Draco_VERSION_MINOR@"
#define Draco_VERSION_PATCH "@Draco_VERSION_PATCH@"

/* System Type */

/*
 * Commonly defined CPP symbols:
 *
 * __GNUC__
 * __clang__
 * __ICC
 * __ibmxl__
 * NVCC
 * APPLE
 * _MSC_FULL_VER, _MSC_VER
 * _WIN32
 * __CYGWIN__
 */

#cmakedefine CRAYPE_CCE @CRAYPE_CCE@
#cmakedefine CMAKE_C_COMPILER_ID @CMAKE_C_COMPILER_ID@
#cmakedefine MSVC @MSVC@
#cmakedefine MSVC_IDE @MSVC_IDE@
#cmakedefine MSVC_VERSION @MSVC_VERSION@
#cmakedefine MINGW @MINGW@
#cmakedefine XCODE @XCODE@
#cmakedefine XCODE_VERSION @XCODE_VERSION@
#cmakedefine CMAKE_SYSTEM_NAME @CMAKE_SYSTEM_NAME@
#ifdef CMAKE_SYSTEM_NAME
#define CMAKE_SYSTEM_NAME_STRING "@CMAKE_SYSTEM_NAME@"
#endif
#cmakedefine UNIX @UNIX@
#cmakedefine draco_isLinux
#cmakedefine draco_isOSF1
#cmakedefine draco_isDarwin
#cmakedefine draco_isAIX
#cmakedefine draco_isLinux_with_aprun
#cmakedefine draco_isCatamount
#cmakedefine draco_isPGI
#cmakedefine draco_isKNL
#cmakedefine draco_is64bit
#cmakedefine draco_isATS2
#cmakedefine DRACO_UNAME @DRACO_UNAME@
#cmakedefine HAVE_GPU @HAVE_GPU@
#cmakedefine USE_GPU @USE_GPU@
/* Eg: project(foo CXX ${GPU_DBS_STRING}) */
#cmakedefine GPU_DBS_STRING @GPU_DBS_STRING@
#cmakedefine APPLE @APPLE@
#cmakedefine SITENAME "@SITENAME@"
#cmakedefine COMPILED_HOSTNAME "@COMPILED_HOSTNAME@"
#cmakedefine COMPILED_FQDN "@COMPILED_FQDN@"
#cmakedefine COMPILED_OS_NAME "@COMPILED_OS_NAME@"
#cmakedefine COMPILED_OS_RELEASE "@COMPILED_OS_RELEASE@"
#cmakedefine COMPILED_OS_VERSION "@COMPILED_OS_VERSION@"
#cmakedefine COMPILED_OS_PLATFORM "@COMPILED_OS_PLATFORM@"

#ifdef __GNUC__
#define DBS_GNUC_VERSION \
  (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

/* round off controls ------------------------------------------------------- */
#cmakedefine DRACO_ROUNDOFF_MODE "@DRACO_ROUNDOFF_MODE@"
#cmakedefine FMA_ALWAYS_SOFTWARE
#cmakedefine FMA_NEVER_SOFTWARE

/*------------------------------------------------------------------------------------------------*/
/* Platform checks */
/*------------------------------------------------------------------------------------------------*/

/* Does this machine support hardware FMA? */
#cmakedefine HAVE_HARDWARE_FMA @HAVE_HARDWARE_FMA@
#cmakedefine HAVE_HARDWARE_AVX2 @HAVE_HARDWARE_AVX2@
#cmakedefine HAVE_HARDWARE_FPU @HAVE_HARDWARE_FPU@
#cmakedefine HAVE_HARDWARE_MMX @HAVE_HARDWARE_MMX@
#cmakedefine HAVE_HARDWARE_MMX_PLUS @HAVE_HARDWARE_MMX_PLUS@
#cmakedefine HAVE_HARDWARE_SSE @HAVE_HARDWARE_SSE@
#cmakedefine HAVE_HARDWARE_SSE2 @HAVE_HARDWARE_SSE2@
#cmakedefine HAVE_HARDWARE_SSE_FP @HAVE_HARDWARE_SSE_FP@
#cmakedefine HAVE_HARDWARE_SSE_MMX @HAVE_HARDWARE_SSE_MMX@

/* Support for C99's restrict keyword */
#cmakedefine HAVE_RESTRICT
/* restrict is valid keyword in C99 but not in C++11.  Protect this define so that it is set only
 * for C++ */
#ifdef __cplusplus
#if ! defined(MSVC) || MSVC_VERSION < 1927
#define restrict @RESTRICT_KEYWORD@
#endif
#endif /* __cplusplus */

/* Platform checks for various functions */

#cmakedefine HAVE_UNISTD_H   @HAVE_UNISTD_H@
#cmakedefine HAVE_WINSOCK2_H @HAVE_WINSOCK2_H@

/* Use the POSIX minimum guarantee if HOST_NAME_MAX is not found.  Should be located in climits
 * (also posixl_lim.h, limits.h, syslimits.h). */
#cmakedefine HAVE_HOST_NAME_MAX
#cmakedefine HAVE_MAXHOSTNAMELEN
#cmakedefine HAVE_POSIX_HOST_NAME_MAX
#if defined __APPLE__
    #define HAVE_HOST_NAME_MAX
    #define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
#endif
#ifndef HAVE_HOST_NAME_MAX
    #ifdef HAVE_MAXHOSTNAMELEN
        #ifndef HOST_NAME_MAX
        #define HOST_NAME_MAX MAXHOSTNAMELEN
        #endif
        #define HAVE_HOST_NAME_MAX
    #else
        #ifndef HOST_NAME_MAX
        #define HOST_NAME_MAX 256
        #endif
        #define HAVE_HOST_NAME_MAX
    #endif
#endif
#cmakedefine HAVE_GETHOSTNAME

/* MAXPATHLEN in "unistd.h;limits.h;sys/param.h" */
#cmakedefine HAVE_MAXPATHLEN
#ifndef HAVE_MAXPATHLEN
    #define MAXPATHLEN 256
    #define HAVE_MAXPATHLEN
#endif

/* OpenMP Setup */
#cmakedefine OpenMP_FOUND
#ifdef OpenMP_FOUND
#define OPENMP_FOUND
#endif

/* ---------------------------------------- */
/* FPE_TRAP Settings */
/* ---------------------------------------- */

// At most, only one of these should be defined in config/ac_platforms.m4
#cmakedefine FPETRAP_OSF_ALPHA    @FPETRAP_OSF_ALPHA@
#cmakedefine FPETRAP_DARWIN_INTEL @FPETRAP_DARWIN_INTEL@
#cmakedefine FPETRAP_DARWIN_PPC   @FPETRAP_DARWIN_PPC@
#cmakedefine FPETRAP_LINUX_X86    @FPETRAP_LINUX_X86@
#cmakedefine FPETRAP_WINDOWS_X86  @FPETRAP_WINDOWS_X86@

// Using values above, determine if fpe_trap is supported
#if defined(FPETRAP_OSF_ALPHA) ||\
    defined(FPETRAP_DARWIN_INTEL) ||\
    defined(FPETRAP_DARWIN_PPC) ||\
    defined(FPETRAP_LINUX_X86) ||\
    defined(FPETRAP_WINDOWS_X86)
#define FPETRAP_SUPPORTED
#else
#define FPETRAP_UNSUPPORTED
#endif

/* ---------------------------------------- */
/*!
 * \page diagnostics Diagnostics Levels
 *
 * The diagnostics can be turned on in three different levels based on logical bit comparisons.  The
 * following shows the levels:
 *
 * - Bit 0, (001), activates Level 1 (negligible performance impact)
 * - Bit 1, (010), activates Level 2 (some performance impact and possible intrusive output,
 *                                   rtt_memory tracking is activated.)
 *                 and a stack trace will be added to DbC messages.
 * - Bit 2, (100), activates Level 3 (includes fpe_trap diagnostics)
 * .
 * The following integer settings activate Levels in the following way:
 * - 0 all off
 * - 1 Level 1
 * - 2 Level 2
 * - 3 Level 1, Level 2
 * - 4 Level 3
 * - 5 Level 1, Level 3
 * - 6 Level 2, Level 3
 * - 7 Level 1, Level 2, Level 3
 * .
  * Thus setting -DDRACO_DIAGNOSTICS=7 at configure time will turn on all levels.  The default
 * setting is 0.
 *
 * The intent is to use Level 1 for high-level, low cost diagnostics that are always active
 * (i.e. User "Education").  Levels 2 and 3 are for low-level diagnostics that could incur a
 * performance penalty.  However, all of these usages are up to the client.
 *
 * The value for DRACO_DIAGNOSTICS is set and saved in ds++'s CMakeLists.tx and config.h,
 * respectively.
 */
/* ---------------------------------------- */

#cmakedefine DRACO_DIAGNOSTICS @DRACO_DIAGNOSTICS@

#if !defined(DRACO_DIAGNOSTICS)
#define DRACO_DIAGNOSTICS 0
#endif

#if DRACO_DIAGNOSTICS & 1
#define DRACO_DIAGNOSTICS_LEVEL_1
#endif

#if DRACO_DIAGNOSTICS & 2
#define DRACO_DIAGNOSTICS_LEVEL_2
#endif

#if DRACO_DIAGNOSTICS & 4
#define DRACO_DIAGNOSTICS_LEVEL_3
#endif

/* ---------------------------------------- */
/* Configuration Options used by CMake      */
/* ---------------------------------------- */
#cmakedefine CMAKE_CXX_COMPILER      "@CMAKE_CXX_COMPILER@"
#cmakedefine CMAKE_CXX_FLAGS         "@CMAKE_CXX_FLAGS@"
#cmakedefine CMAKE_CXX_FLAGS_DEBUG   "@CMAKE_CXX_FLAGS_DEBUG@"
#cmakedefine CMAKE_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@"
#cmakedefine CMAKE_CXX_FLAGS_RELWITHDEBINFO "@CMAKE_CXX_FLAGS_RELWITHDEBINFO@"
#cmakedefine CMAKE_CXX_FLAGS_MINSIZEREL     "@CMAKE_CXX_FLAGS_MINSIZEREL@"
#cmakedefine CMAKE_C_COMPILER        "@CMAKE_C_COMPILER@"
#cmakedefine CMAKE_C_FLAGS           "@CMAKE_C_FLAGS@"
#cmakedefine CMAKE_C_FLAGS_DEBUG     "@CMAKE_C_FLAGS_DEBUG@"
#cmakedefine CMAKE_C_FLAGS_RELEASE   "@CMAKE_C_FLAGS_RELEASE@"
#cmakedefine CMAKE_C_FLAGS_RELWITHDEBINFO "@CMAKE_C_FLAGS_RELWITHDEBINFO@"
#cmakedefine CMAKE_C_FLAGS_MINSIZEREL     "@CMAKE_C_FLAGS_MINSIZEREL@"
#cmakedefine CMAKE_Fortran_COMPILER  "@CMAKE_Fortran_COMPILER@"
#cmakedefine CMAKE_Fortran_FLAGS     "@CMAKE_Fortran_FLAGS@"
#cmakedefine CMAKE_Fortran_FLAGS_DEBUG     "@CMAKE_Fortran_FLAGS_DEBUG@"
#cmakedefine CMAKE_Fortran_FLAGS_RELEASE   "@CMAKE_Fortran_FLAGS_RELEASE@"
#cmakedefine CMAKE_Fortran_FLAGS_RELWITHDEBINFO "@CMAKE_Fortran_FLAGS_RELWITHDEBINFO@"
#cmakedefine CMAKE_Fortran_FLAGS_MINSIZEREL     "@CMAKE_Fortran_FLAGS_MINSIZEREL@"
#cmakedefine CMAKE_CUDA_COMPILER        "@CMAKE_CUDA_COMPILER@"
#cmakedefine CMAKE_CUDA_FLAGS           "@CMAKE_CUDA_FLAGS@"
#cmakedefine CMAKE_CUDA_FLAGS_DEBUG     "@CMAKE_CUDA_FLAGS_DEBUG@"
#cmakedefine CMAKE_CUDA_FLAGS_RELEASE   "@CMAKE_CUDA_FLAGS_RELEASE@"
#cmakedefine CMAKE_CUDA_FLAGS_RELWITHDEBINFO "@CMAKE_CUDA_FLAGS_RELWITHDEBINFO@"
#cmakedefine CMAKE_CUDA_FLAGS_MINSIZEREL     "@CMAKE_CUDA_FLAGS_MINSIZEREL@"
#cmakedefine CMAKE_HIP_COMPILER        "@CMAKE_HIP_COMPILER@"
#cmakedefine CMAKE_HIP_FLAGS           "@CMAKE_HIP_FLAGS@"
#cmakedefine CMAKE_HIP_FLAGS_DEBUG     "@CMAKE_HIP_FLAGS_DEBUG@"
#cmakedefine CMAKE_HIP_FLAGS_RELEASE   "@CMAKE_HIP_FLAGS_RELEASE@"
#cmakedefine CMAKE_HIP_FLAGS_RELWITHDEBINFO "@CMAKE_HIP_FLAGS_RELWITHDEBINFO@"
#cmakedefine CMAKE_HIP_FLAGS_MINSIZEREL     "@CMAKE_HIP_FLAGS_MINSIZEREL@"

/* Used by Assert.hh to allow it to be used by C++ or cuda/hip */
#if defined __CUDA_ARCH__ || defined __HIPCC__
#define __GPU_ARCH__
#endif

#cmakedefine CMAKE_BUILD_TYPE "@CMAKE_BUILD_TYPE@"
#cmakedefine CMAKE_COMPILER_IS_GNUCXX         @CMAKE_COMPILER_IS_GNUCXX@
#cmakedefine CMAKE_CXX_COMPILER_ID            @CMAKE_CXX_COMPILER_ID@
#cmakedefine CMAKE_CXX_COMPILER_VERSION      "@CMAKE_CXX_COMPILER_VERSION@"
#cmakedefine CMAKE_CXX_COMPILER_VERSION_ENUM  @CMAKE_CXX_COMPILER_VERSION_ENUM@

/* Help for GSL on Windows ---------------------------------- */
#if defined _WIN32 || defined __CYGWIN__
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
     #define GSL_DLL 1
  #endif
#endif

/* ----------------------------------------------------------------
 * Define declaration specifiers for MSVC and GCC.  This defines CPP definitions like
 * DLL_PUBLIC_<pkg>
 * ---------------------------------------------------------------- */
#include "ds++/dll_declspec.h"

/* In MSVC, constants like M_PI are not defined by default in math.h.  To include them, we must
 * define _USE_MATH_DEFINES. The undefs help MSVC resolve numeric_limits<T>::max()
 * vs. std::max(int,int) */
#ifdef _MSC_VER
    #undef max
    #undef min
    #define NOMINMAX
    /* We want to use M_PI from math.h */
    #define _USE_MATH_DEFINES
    /* MSVC's __FUNCSIG__ is similar to GNU's __PRETTY_FUNCTION__ */
    #define  __PRETTY_FUNCTION__ __FUNCSIG__
#endif

#ifdef APPLE
    #undef  M_PI
    #define M_PI     3.14159265358979323846264338327950288
#endif

/* ----------------------------------------------------------------
 * Clean code:
 * ---------------------------------------------------------------- */

/* When using GCC, provide a CPP macro that tells the compiler to expect (and not warn) if a
   variable is defined but not used.  This warning can be suppressed by marking the variable with a
   special attribute.  See jayenne/src/mc/Constants.hh. */
#ifdef __GNUC__
#define VARIABLE_IS_NOT_USED __attribute__ ((unused))
#else
#define VARIABLE_IS_NOT_USED
#endif

#endif /* __dsxx_config_h__ */

/*------------------------------------------------------------------------------------------------*/
/* end of config.h */
/*------------------------------------------------------------------------------------------------*/
